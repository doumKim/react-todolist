{"version":3,"sources":["components/TodolistTemplate.jsx","TodoContext.jsx","components/TodoCreate.jsx","components/TodoHead.jsx","components/TodoListItem.jsx","components/TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["TodolistTemplateBlock","styled","div","TodolistTemplate","children","initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","context","useContext","useTodoDispatch","TodoCreateButton","button","props","openInput","css","InsertFormPositioner","InsertForm","form","Input","input","React","memo","useTodoNextId","refInput","useState","setOpenInput","setValue","onSubmit","e","preventDefault","current","placeholder","onChange","target","ref","onClick","focus","TodoHeadBlock","TodoHead","todos","undoneTasks","console","log","className","format","timezone","length","Remove","TodoItemBlock","Text","CheckIcon","TodoListBlock","TodoList","key","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3a56c3b8.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst TodolistTemplateBlock = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 500px;\n\theight: 700px;\n\tborder-radius: 15px;\n\tbox-shadow: 0 0 19px 0 rgba(0, 0, 0, 0.25);\n\toverflow: hidden;\n\tbackground: #f8f9fa;\n`;\n\nconst TodolistTemplate = ({ children }) => {\n\treturn <TodolistTemplateBlock>{children}</TodolistTemplateBlock>;\n};\n\nexport default TodolistTemplate;\n","import React, { useReducer, createContext, useContext, useRef } from 'react';\n\nconst initialTodos = [\n\t{\n\t\tid: 1,\n\t\ttext: '리엑트 기초 공부',\n\t\tdone: true,\n\t},\n\t{\n\t\tid: 2,\n\t\ttext: '프로젝트 구성하기',\n\t\tdone: true,\n\t},\n\t{\n\t\tid: 3,\n\t\ttext: '컴포넌트 스타일링하기',\n\t\tdone: false,\n\t},\n\t{\n\t\tid: 4,\n\t\ttext: '컨텍스트 만들기',\n\t\tdone: false,\n\t},\n];\n\nfunction todoReducer(state, action) {\n\tswitch (action.type) {\n\t\tcase 'CREATE':\n\t\t\treturn state.concat(action.todo);\n\t\tcase 'TOGGLE':\n\t\t\treturn state.map((todo) =>\n\t\t\t\ttodo.id === action.id ? { ...todo, done: !todo.done } : todo,\n\t\t\t);\n\t\tcase 'REMOVE':\n\t\t\treturn state.filter((todo) => todo.id !== action.id);\n\t\tdefault:\n\t\t\tthrow new Error(`Unhandled action !`);\n\t}\n}\n\nconst TodoStateContext = createContext();\nconst TodoDispatchContext = createContext();\nconst TodoNextIdContext = createContext();\n\nexport const TodoProvider = ({ children }) => {\n\tconst [state, dispatch] = useReducer(todoReducer, initialTodos);\n\tconst nextId = useRef(5);\n\n\treturn (\n\t\t<TodoStateContext.Provider value={state}>\n\t\t\t<TodoDispatchContext.Provider value={dispatch}>\n\t\t\t\t<TodoNextIdContext.Provider value={nextId}>\n\t\t\t\t\t{children}\n\t\t\t\t</TodoNextIdContext.Provider>\n\t\t\t</TodoDispatchContext.Provider>\n\t\t</TodoStateContext.Provider>\n\t);\n};\n\nexport const useTodoState = () => {\n\tconst context = useContext(TodoStateContext);\n\tif (!context) {\n\t\tthrow new Error(`Cannot find TodoProvider`);\n\t}\n\treturn context;\n};\n\nexport const useTodoDispatch = () => {\n\tconst context = useContext(TodoDispatchContext);\n\tif (!context) {\n\t\tthrow new Error(`Cannot find TodoProvider`);\n\t}\n\treturn context;\n};\n\nexport const useTodoNextId = () => {\n\tconst context = useContext(TodoNextIdContext);\n\tif (!context) {\n\t\tthrow new Error(`Cannot find TodoProvider`);\n\t}\n\treturn context;\n};\n","import React, { useState, useRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdAdd } from 'react-icons/md';\nimport { useTodoDispatch, useTodoNextId } from '../TodoContext';\n\nconst TodoCreateButton = styled.button`\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tposition: absolute;\n\tright: 40px;\n\tbottom: 0;\n\ttransform: translate(0, 50%);\n\twidth: 50px;\n\theight: 50px;\n\tbackground: #e96f6c;\n\t&:hover {\n\t\tbackground: #fe918d;\n\t}\n\t&:active {\n\t\tbackground: #e78e8b;\n\t}\n\tfont-size: 30px;\n\tborder-radius: 50%;\n\tborder: none;\n\tcolor: #fdf3f3;\n\tcursor: pointer;\n\tz-index: 9;\n\n\ttransition: 0.2s all ease-out;\n\n\t${(props) =>\n\t\tprops.openInput &&\n\t\tcss`\n\t\t\tbackground: #55bd9e;\n\t\t\t&:hover {\n\t\t\t\tbackground: #63d1b0;\n\t\t\t}\n\t\t\t&:active {\n\t\t\t\tbackground: #479e84;\n\t\t\t}\n\t\t\ttransform: translate(0, 50%) rotate(45deg);\n\t\t`}\n`;\n\nconst InsertFormPositioner = styled.div`\n\toverflow: hidden;\n\ttransition: 0.2s all ease-out;\n\theight: 0;\n\t${(props) =>\n\t\tprops.openInput &&\n\t\tcss`\n\t\t\tmargin: 20px 0px 10px;\n\t\t\theight: 100px;\n\t\t`};\n`;\n\nconst InsertForm = styled.form`\n\tdisplay: block;\n\tbackground: #f1f3f5;\n\tpadding: 32px;\n\tborder-radius: 4px;\n\tbox-sizing: border-box;\n`;\n\nconst Input = styled.input`\n\tdisplay: block;\n\twidth: 100%;\n\tpadding: 12px;\n\tborder-radius: 4px;\n\tborder: 1px solid #dee2e6;\n\toutline: none;\n\tbox-sizing: border-box;\n`;\n\nconst TodoCreate = () => {\n\tconst dispatch = useTodoDispatch();\n\tconst nextId = useTodoNextId();\n\n\tconst refInput = useRef(null);\n\n\tconst [openInput, setOpenInput] = useState(false);\n\tconst [value, setValue] = useState('');\n\tconst onToggle = () => {\n\t\tsetOpenInput(!openInput);\n\t\trefInput.current.focus();\n\t};\n\tconst onChange = (e) => setValue(e.target.value);\n\tconst onSubmit = (e) => {\n\t\te.preventDefault();\n\t\tdispatch({\n\t\t\ttype: 'CREATE',\n\t\t\ttodo: {\n\t\t\t\tid: nextId.current,\n\t\t\t\ttext: value,\n\t\t\t\tdone: false,\n\t\t\t},\n\t\t});\n\t\tsetValue('');\n\t\tsetOpenInput(false);\n\t\tnextId.current += 1;\n\t};\n\treturn (\n\t\t<>\n\t\t\t<InsertFormPositioner openInput={openInput}>\n\t\t\t\t<InsertForm onSubmit={onSubmit}>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tplaceholder=\"할 일을 입력 후, Enter 를 누르세요\"\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tref={refInput}\n\t\t\t\t\t/>\n\t\t\t\t</InsertForm>\n\t\t\t</InsertFormPositioner>\n\t\t\t<TodoCreateButton openInput={openInput} onClick={onToggle}>\n\t\t\t\t<MdAdd />\n\t\t\t</TodoCreateButton>\n\t\t</>\n\t);\n};\n\nexport default React.memo(TodoCreate);\n","import React from 'react';\nimport TodoCreate from './TodoCreate';\nimport styled from 'styled-components';\nimport { useTodoState } from '../TodoContext';\nimport Clock from 'react-live-clock';\n\nconst TodoHeadBlock = styled.div`\n\tposition: relative;\n\tpadding: 30px 32px 25px;\n\tborder-bottom: 1px solid #dee2e6;\n\th2.day {\n\t\tmargin: 0;\n\t\tcolor: #8b8efb;\n\t\tfont-size: 32px;\n\t\tspan {\n\t\t\tfont-weight: normal;\n\t\t\tfont-size: 25px;\n\t\t}\n\t}\n\tp.month {\n\t\tmargin: 0;\n\t\tmargin-top: 15px;\n\t\tcolor: #b1b2c4;\n\t\tfont-size: 19px;\n\t}\n\tp.left-task {\n\t\tposition: absolute;\n\t\tright: 30px;\n\t\ttop: 35px;\n\t\tfont-size: 15px;\n\t\tletter-spacing: -0.5px;\n\t\tcolor: #868e96;\n\t\tfont-weight: 500;\n\t}\n`;\n\nconst TodoHead = () => {\n\tconst todos = useTodoState();\n\tconst undoneTasks = todos.filter((todo) => todo.done === false);\n\tconsole.log(todos);\n\treturn (\n\t\t<TodoHeadBlock>\n\t\t\t<h2 className=\"day\">\n\t\t\t\t<Clock format={'dddd'} />\n\t\t\t\t<span>\n\t\t\t\t\t&nbsp;&nbsp;\n\t\t\t\t\t<Clock format={'Do'} />\n\t\t\t\t</span>\n\t\t\t</h2>\n\t\t\t<p className=\"month\">\n\t\t\t\t<Clock format={'MMMM, YYYY,  A hh:mm:ss'} timezone={'Asia/Seoul'} />\n\t\t\t</p>\n\t\t\t<p className=\"left-task\">{undoneTasks.length} Tasks left</p>\n\t\t\t<TodoCreate />\n\t\t</TodoHeadBlock>\n\t);\n};\n\nexport default TodoHead;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdCheckBoxOutlineBlank, MdCheckBox, MdDelete } from 'react-icons/md';\nimport { useTodoDispatch } from '../TodoContext';\n\nconst Remove = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tcolor: #dee2e6;\n\tfont-size: 20px;\n\tcursor: pointer;\n\t&:hover {\n\t\tcolor: #ff6b6b;\n\t}\n\tdisplay: none;\n`;\n\nconst TodoItemBlock = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tpadding-top: 20px;\n\tpadding-bottom: 20px;\n\t&:hover {\n\t\t${Remove} {\n\t\t\tdisplay: initial;\n\t\t}\n\t}\n`;\n\nconst Text = styled.div`\n\tflex: 1;\n\tfont-size: 23px;\n\tcolor: #495057;\n\t${(props) =>\n\t\tprops.done &&\n\t\tcss`\n\t\t\tcolor: #ced4da;\n\t\t\ttext-decoration: line-through;\n\t\t`}\n`;\n\nconst CheckIcon = styled.div`\n\twidth: 30px;\n\tborder-radius: 16px;\n\tborder: none;\n\tfont-size: 23px;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tmargin-right: 20px;\n\tcursor: pointer;\n\tcolor: #ea7572;\n\t${(props) =>\n\t\tprops.done ||\n\t\tcss`\n\t\t\tcolor: #adb5bd;\n\t\t`}\n`;\n\nconst TodoListItem = ({ id, done, text }) => {\n\tconst dispatch = useTodoDispatch();\n\tconst onToggle = () => dispatch({ type: 'TOGGLE', id });\n\tconst onRemove = () => dispatch({ type: 'REMOVE', id });\n\treturn (\n\t\t<TodoItemBlock>\n\t\t\t<CheckIcon onClick={onToggle} done={done}>\n\t\t\t\t{done ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\n\t\t\t</CheckIcon>\n\t\t\t<Text done={done}>{text}</Text>\n\t\t\t<Remove onClick={onRemove}>\n\t\t\t\t<MdDelete />\n\t\t\t</Remove>\n\t\t</TodoItemBlock>\n\t);\n};\n\nexport default React.memo(TodoListItem);\n","import React from 'react';\nimport styled from 'styled-components';\nimport TodoListItem from './TodoListItem';\nimport { useTodoState } from '../TodoContext';\n\nconst TodoListBlock = styled.div`\n\tflex: 1;\n\tpadding: 30px 32px;\n\toverflow-y: auto;\n\tbackground: #fbfcfc;\n`;\n\nconst TodoList = () => {\n\tconst todos = useTodoState();\n\treturn (\n\t\t<TodoListBlock>\n\t\t\t{todos.map((todo) => (\n\t\t\t\t<TodoListItem\n\t\t\t\t\tkey={todo.id}\n\t\t\t\t\tid={todo.id}\n\t\t\t\t\ttext={todo.text}\n\t\t\t\t\tdone={todo.done}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</TodoListBlock>\n\t);\n};\n\nexport default TodoList;\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport TodolistTemplate from './components/TodolistTemplate';\nimport TodoHead from './components/TodoHead';\nimport TodoList from './components/TodoList';\nimport { TodoProvider } from './TodoContext';\n\nconst GlobalStyle = createGlobalStyle`\n  *{\n    margin:0;\n    padding:0;\n  }\n  body{\n    display:flex;\n    align-items:center;\n    justify-content:center;\n    width:100vw;\n    height:100vh;\n    background: rgb(172,172,224);\n    background: linear-gradient(90deg, rgba(172,172,224,1) 0%, rgba(233,232,245,1) 100%);\n  }\n`;\n\nfunction App() {\n\treturn (\n\t\t<TodoProvider>\n\t\t\t<GlobalStyle />\n\t\t\t<TodolistTemplate>\n\t\t\t\t<TodoHead />\n\t\t\t\t<TodoList />\n\t\t\t</TodolistTemplate>\n\t\t</TodoProvider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}